name: Orange.Primitives

on:
  push:
    branches:
    - master
  #  - 'releases/**'
  #  - '!releases/**-alpha'
  # tags:
  #  - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    paths:
    - '.github/workflows/Orange.Primitives.yml'
    - 'src/Orange.Primitives/**'
    # - '!.github/**'
    # - '!.vscode/**'
    # - '!docs/**'
    # - '!test/**'
    # - '!tools/**'
    # - '!**/*.md'
    # - '!**/*.editorconfig'
    # - '!**/*.gitattributes'
    # - '!**/*.gitignore'

jobs:

  build:
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '***NO_CI***') == false && contains(toJson(github.event.commits), '[ci skip]') == false && contains(toJson(github.event.commits), '[skip ci]') == false
    runs-on: ubuntu-latest

    env:
      #solution: '**/*.sln'
      #buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      buildNumber: '1.2'
      projectFile: './src/Orange.Primitives/Orange.Primitives.csproj'
      projectTestFile: './test/Orange.Primitives.Tests/Orange.Primitives.Tests.csproj'

    steps:
      - name: Extract branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Set the build number
        run: echo ::set-env name=buildNumber::$buildNumber.${GITHUB_RUN_NUMBER}

      - uses: actions/checkout@v2
        with:
          ref: master

      - name: Set NuGet credentials
        shell: pwsh
        run: |
          ./tools/Set-NuGetCredentials.ps1 -ConfigFile ./nuget.config -Source github -Username ${{github.actor}} -Password ${{ secrets.GITHUB_TOKEN }}
#         ./tools/Set-NuGetCredentials.ps1 -ConfigFile ./nuget.config -Source nuget -Username ${{secrets.NUGET_USERNAME}} -Password ${{ secrets.NUGET_API_KEY }}
          # waiting for https://github.com/NuGet/Home/issues/4126

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101

      - name: Format
        run: |
          echo "::set-env name=PATH::${PATH}:${HOME}/.dotnet/tools"
          dotnet tool install -g dotnet-format
#         dotnet format --folder ./ --dry-run --check
          # waiting for https://github.com/actions/virtual-environments/issues/213

      - name: Restore
        run: dotnet restore $projectFile
      - name: Build
        run: dotnet build $projectFile --configuration $buildConfiguration -p:BuildNumber=$buildNumber
      - name: Test
        run: dotnet test $projectTestFile --configuration $buildConfiguration -p:CollectCoverage=true
        continue-on-error: true
      - name: Publish
        run: dotnet publish $projectFile --configuration $buildConfiguration --no-restore --no-build --output ./artifacts/staging
      - name: Pack
        run: dotnet pack $projectFile --configuration $buildConfiguration --no-restore --no-build --output ./artifacts/packages

      - name: Publish artifacts (staging)
        uses: actions/upload-artifact@master
        with:
          name: staging
          path: ./artifacts/staging

      - name: Publish artifacts (packages)
        uses: actions/upload-artifact@master
        with:
          name: packages
          path: ./artifacts/packages

      - name: Publish artifacts (output)
        uses: actions/upload-artifact@master
        if: failure()
        with:
          name: output
          path: ./

      - name: Debug details
        if: failure()
        shell: pwsh
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          Get-Location
          echo ${env:PATH}
          echo ${{ secrets.GITHUB_TOKEN }}
          echo $env:INTERNAL_VARIABLE
          echo ${env:buildConfiguration}
          echo ${{ steps.extract_branch.outputs.branch }}
          echo ${{github.actor}}
          echo https://github.com/${{github.repository}}/workflows/${{github.workflow}}/badge.svg
          echo 1-${env:buildNumber}
          echo 2-$env:buildNumber
          echo 3-${buildNumber}
          echo 4-$buildNumber
          echo "This workflow run is triggered by ${{ github.event_name }} ."
          echo "*****************************************************************************"
          echo "$env:GITHUB_CONTEXT"
          echo "*****************************************************************************"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{env.buildNumber}}
          release_name: ${{github.workflow}}.${{env.buildNumber}}
          draft: false
          prerelease: true
          body: |
            [Changelog](https://github.com/${{github.repository}}/blob/${{ steps.extract_branch.outputs.branch }}/CHANGELOG.md)
#           [Release Notes](https://github.com/${{github.repository}}/blob/${{ steps.extract_branch.outputs.branch }}/release-notes/${{env.buildNumber}}.md)

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./artifacts/packages/${{github.workflow}}.${{env.buildNumber}}.nupkg
          asset_name: ${{github.workflow}}.${{env.buildNumber}}.nupkg
          asset_content_type: application/zip

      - name: Push to GitHub Packages
        run: dotnet nuget push ./artifacts/packages/*.nupkg --skip-duplicate --source "github" --api-key ${GITHUB_TOKEN}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     - name: Push to Nuget
#       run: dotnet nuget push ./artifacts/packages/*.nupkg --skip-duplicate --source "nuget" --api-key ${NUGET_API_KEY}
#       env:
#         NUGET_API_KEY: ${{secrets.NUGET_API_KEY}}
        # waiting for https://github.com/NuGet/Home/issues/8580


  # deploy:
  #   needs: build
  #   name: Deploy Packages
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download Package artifact
  #       uses: actions/download-artifact@master
  #       with:
  #         name: packages

  #     - name: Setup NuGet
  #       uses: NuGet/setup-nuget@v1.0.2
  #       with:
  #        nuget-version: latest

  #     - name: Setup NuGet GPR
  #       run: |
  #         nuget sources Add -Name GPR -Source https://nuget.pkg.github.com/cilerler/index.json -Username CILERLER -Password ${{ secrets.GITHUB_TOKEN }}
  #         nuget setApiKey ${{ secrets.GITHUB_TOKEN }} -Source "GPR"
  #         nuget push ./packages/*.nupkg -Source "GPR" -SkipDuplicate


# https://github.community/t5/GitHub-Actions/Triggering-by-other-repository/m-p/30688/highlight/true#M512

